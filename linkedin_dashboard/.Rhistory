mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE)
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#fct_relevel(as.factor(skill), sort(value)) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
fct_relevel(as.factor(skill), desc(value)) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
?fct_reorder
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
fct_relevel(as.factor(skill), .fun=desc) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
fct_relevel(as.factor(skill), .x=skill .fun=desc) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
fct_relevel(as.factor(skill), .x=skill, .fun=desc) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
mutate(skill=as.factor(skill)) %>%
fct_relevel(as.factor(skill), .x=skill, .fun=desc) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
mutate(skill=as.factor(skill)) %>%
fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
mutate(skill=as.factor(skill)) %>%
fct_relevel(skill, .x=skill, .fun=median)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
df_jobs <- read_csv("../jobs_df_clean.csv")
df_jobs <- df_jobs %>%
mutate(job_type = if_else(grepl(df_jobs$title, pattern="analyst", ignore.case = T), "Data Analyst", "Data Scientist"))
cities <- df_jobs %>% pull(location) %>% unique()
job_types <- df_jobs %>% pull(type) %>% unique()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
#filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
?reactive
dat <- datasetInput()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
df_jobs <- read_csv("../jobs_df_clean.csv")
df_jobs <- df_jobs %>%
mutate(job_type = if_else(grepl(df_jobs$title, pattern="analyst", ignore.case = T), "Data Analyst", "Data Scientist"))
cities <- df_jobs %>% pull(location) %>% unique()
job_types <- df_jobs %>% pull(type) %>% unique()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
#filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat <- datasetInput()
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
df_jobs <- read_csv("../jobs_df_clean.csv")
df_jobs <- df_jobs %>%
mutate(job_type = if_else(grepl(df_jobs$title, pattern="analyst", ignore.case = T), "Data Analyst", "Data Scientist"))
cities <- df_jobs %>% pull(location) %>% unique()
job_types <- df_jobs %>% pull(type) %>% unique()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
#filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat <- datasetInput()
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
df_jobs <- read_csv("../jobs_df_clean.csv")
df_jobs <- df_jobs %>%
mutate(job_type = if_else(grepl(df_jobs$title, pattern="analyst", ignore.case = T), "Data Analyst", "Data Scientist"))
cities <- df_jobs %>% pull(location) %>% unique()
job_types <- df_jobs %>% pull(type) %>% unique()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
#filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat <- datasetInput()
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
job_types <- df_jobs %>% pull(type) %>% unique()
job_types <- df_jobs %>% pull(job_type) %>% unique()
cities
job_types
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("LinkedIn Data Scientists Jobs"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "city",
label = "Choose a city:",
choices = cities),
selectInput(inputId = "job",
label = "Choose a job type:",
choices = job_types),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("skill_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
#filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat <- datasetInput()
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- reactive({
city = input$city
job = input$job
#Filter dataset based on user inputs
dat <- df_jobs %>%
filter(location == city) %>%
filter(job_type == job)
})
output$skill_plot <- renderPlot({
dat <- datasetInput()
dat %>%
select(location, job_type, bigquery_Requirements:university_Requirements) %>%
group_by(location, job_type) %>%
summarize_all(.funs=sum) %>%
gather(key="attribute", value="value", -location, -job_type) %>%
separate(attribute, into =c("skill", "level"), sep="_") %>%
#mutate(skill = as.factor(skill, levels=skill[desc(value)]), ordered=TRUE) %>%
#mutate(skill=as.factor(skill)) %>%
#fct_relevel(skill, .x=skill, .fun=median) %>%
ggplot(aes(x=skill, y=value, fill=level)) +
geom_col() +
coord_flip() +
theme_minimal() +
#facet_wrap()
NULL
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
